{
  "version": 3,
  "sources": ["../src/zipsplit.ts"],
  "sourcesContent": ["const someMaxUint32 = (...arg: number[]) => arg.some(x => x === 0xffffffff);\n\nconst readFileSlice = async (file: File, start: number, length: number) => \n    new Promise<Uint8Array>((resolve, reject) => {\n        const reader = new FileReader();\n        [reader.onload, reader.onerror] = [() => resolve(\n            new Uint8Array(reader.result as ArrayBuffer)\n        ), () => reject(reader.error)];\n        reader.readAsArrayBuffer(file.slice(start, start + length));\n    });\n\nconst view = (bytes: Uint8Array, size: number, offset = 0) => Number(\n    bytes.slice(offset, offset + size).reduce(\n        (a, b, i) => a + (BigInt(b) << BigInt(8*i)), BigInt(0)\n    )\n);\n\nexport const iterateFiles = async function* enumerateZipEntries(file: File) {\n    const eocdSize = 42;\n    const eocd = await readFileSlice(file, file.size - eocdSize, eocdSize);\n    // [centralDirOffset, centralDirSize]\n    let centralDir = [36, 32].map(x => view(eocd, 4, x));\n\n    if (view(eocd, 4, 20) !== 0x06054b50) { // EOCD_SIG\n        throw new Error(\"cannot locate end of central directory signature\");\n    }\n\n    // 0x07064b50: ZIP64_LOCATOR_SIG\n    if (someMaxUint32(...centralDir) && view(eocd, 4) === 0x07064b50) {\n        const eocd64 = await readFileSlice(file, view(eocd, 8, 8), 56);\n        if (view(eocd64, 4) === 0x06064b50) { // ZIP64_EOCD_SIG\n            centralDir = [48, 40].map(x => view(eocd64, 8, x));\n        }\n    }\n\n    const cd = await readFileSlice(file, ...centralDir as [number, number]);\n\n    const commentBegin = 46;\n    for (\n        let ptr = 0, lengths; ptr + commentBegin <= cd.length;\n        ptr += commentBegin + lengths.reduce((a, b) => a + b, 0)\n    ) {\n        if (view(cd, 4, ptr) !== 0x02014b50) {\n            throw new Error(\"invalid central directory header signature\");\n        }\n\n        // [uncompressedSize, compressedSize, localHeaderOffset]\n        const tmp = [24, 20, 42].map(x => view(cd, 4, ptr + x));\n\n        // [fileNameLength, extraFieldLength, fileCommentLength]\n        lengths = [28, 30, 32].map(x => view(cd, 2, ptr + x));\n        const comment = [0, lengths[0]].map(x => x + ptr + commentBegin);\n\n        if (someMaxUint32(...tmp)) { // zip64\n            const end = comment[1] + lengths[1] - 4;\n\n            for (let pos = comment[1], id, size; pos < end; pos += size + 4) {\n                [id, size] = [0, 2].map(x => view(cd, 2, pos + x));\n\n                if (id === 0x0001) {\n                    for (let i = 0, offsetInBlock = 4; i < tmp.length; i++) {\n                        if (someMaxUint32(tmp[i])){ // yes, it's tmp[i]\n                            tmp[i] = view(cd, 8, pos + offsetInBlock);\n                            offsetInBlock += 8;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        // compression method\n        if (view(cd, 2, ptr + 10) != 0 || tmp[0] != tmp[1]) {\n            throw new Error(\"only uncompressed files supported\");\n        }\n\n        const lfh = await readFileSlice(file, tmp[2], tmp[2] + 30);\n\n        if(view(lfh, 4) != 0x04034b50) {\n            throw new Error('invalid local file header signature')\n        }\n\n        yield new File(\n            [(x => file.slice(x, x + tmp[0]))([26, 28].map(\n                x => view(lfh, 2, x)).reduce((a, b) => a + b, 30 + tmp[2]))],\n            new TextDecoder(\"utf-8\").decode(cd.slice(...comment))\n        );\n    }\n}\n\nexport const getAllFiles = async (file: File) => {\n    const results: File[] = [];\n    for await (const item of iterateFiles(file)) results.push(item);\n    return results;\n}"],
  "mappings": "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",
  "names": []
}
